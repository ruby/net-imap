---
prelude: |
  require "yaml"
  require "net/imap"

  INPUT_COUNT = Integer ENV.fetch("SEQSET_LHS_SIZE", 1000)
  MAX_INPUT  = Integer ENV.fetch("SEQSET_LHS_MAX",  1400)

  SETS = Array.new(1000) {
    Net::IMAP::SequenceSet[Array.new(INPUT_COUNT) { rand(1..MAX_INPUT) }]
  }

  def sets
    l, r = SETS.sample(2)
    [l.dup, r]
  end

  # warmup for YJIT
  if RubyVM::YJIT.enabled?
    200.times do
      lhs, rhs = sets
      lhs | rhs
      lhs & rhs
      lhs - rhs
      lhs ^ rhs
      ~lhs
    end
  end

benchmark:
  union:        l, r = sets; l | r
  intersection: l, r = sets; l & r
  difference:   l, r = sets; l - r
  xor:          l, r = sets; l ^ r
  complement:   l, _ = sets; ~l

  intersect?:   l, r = sets; l.intersect? r
  disjoint?:    l, r = sets; l.disjoint? r
  cover?:       l, r = sets; l.cover? r
