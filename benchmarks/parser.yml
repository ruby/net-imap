---
prelude: |2
    require "yaml"
    require "net/imap"

    def load_response(file, name)
      YAML.unsafe_load_file(file).dig(:tests, name, :response)
        .force_encoding "ASCII-8BIT" \
        or abort "ERRORO: missing %p fixture data in %p" % [name, file]
    end

    parser   = Net::IMAP::ResponseParser.new
benchmark:
- name: NAMESPACE_rfc2342_example_5.1
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/namespace_responses.yml",
                               "NAMESPACE_rfc2342_example_5.1")
  script: parser.parse(response)
- name: NAMESPACE_rfc2342_example_5.2
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/namespace_responses.yml",
                               "NAMESPACE_rfc2342_example_5.2")
  script: parser.parse(response)
- name: NAMESPACE_rfc2342_example_5.3
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/namespace_responses.yml",
                               "NAMESPACE_rfc2342_example_5.3")
  script: parser.parse(response)
- name: NAMESPACE_rfc2342_example_5.4
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/namespace_responses.yml",
                               "NAMESPACE_rfc2342_example_5.4")
  script: parser.parse(response)
- name: NAMESPACE_rfc2342_example_5.5
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/namespace_responses.yml",
                               "NAMESPACE_rfc2342_example_5.5")
  script: parser.parse(response)
- name: NAMESPACE_rfc2342_example_5.6
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/namespace_responses.yml",
                               "NAMESPACE_rfc2342_example_5.6")
  script: parser.parse(response)
- name: NAMESPACE_rfc2342_example_5.7
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/namespace_responses.yml",
                               "NAMESPACE_rfc2342_example_5.7")
  script: parser.parse(response)
- name: NAMESPACE_rfc2342_example_5.9
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/namespace_responses.yml",
                               "NAMESPACE_rfc2342_example_5.9")
  script: parser.parse(response)
- name: NAMESPACE_rfc9051_6.3.10_example_8
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/namespace_responses.yml",
                               "NAMESPACE_rfc9051_6.3.10_example_8")
  script: parser.parse(response)
- name: acl_response
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/acl_responses.yml",
                               "test_acl_response")
  script: parser.parse(response)
- name: bodystructure_bug11128_ext_mpart_without_lang
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/body_structure_responses.yml",
                               "test_bodystructure_bug11128_ext_mpart_without_lang")
  script: parser.parse(response)
- name: bodystructure_bug7146_msg_delivery_status
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/body_structure_responses.yml",
                               "test_bodystructure_bug7146_msg_delivery_status")
  script: parser.parse(response)
- name: bodystructure_bug7147_message_rfc822_attachment
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/body_structure_responses.yml",
                               "test_bodystructure_bug7147_message_rfc822_attachment")
  script: parser.parse(response)
- name: bodystructure_bug8167_delivery_status_with_extra_data
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/body_structure_responses.yml",
                               "test_bodystructure_bug8167_delivery_status_with_extra_data")
  script: parser.parse(response)
- name: bodystructure_mixed_boundary
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/body_structure_responses.yml",
                               "test_bodystructure_mixed_boundary")
  script: parser.parse(response)
- name: continuation_request_without_response_text
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/continuation_requests.yml",
                               "test_continuation_request_without_response_text")
  script: parser.parse(response)
- name: fetch_msg_att_flags_and_uid
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/fetch_responses.yml",
                               "test_fetch_msg_att_flags_and_uid")
  script: parser.parse(response)
- name: fetch_msg_att_modseq
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/fetch_responses.yml",
                               "test_fetch_msg_att_modseq")
  script: parser.parse(response)
- name: fetch_msg_att_rfc822
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/fetch_responses.yml",
                               "test_fetch_msg_att_rfc822")
  script: parser.parse(response)
- name: fetch_msg_att_uid
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/fetch_responses.yml",
                               "test_fetch_msg_att_uid")
  script: parser.parse(response)
- name: id_gmail
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/id_responses.yml",
                               "test_id_gmail")
  script: parser.parse(response)
- name: id_rfc2971_example_3.1_nil
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/id_responses.yml",
                               "test_id_rfc2971_example_3.1_nil")
  script: parser.parse(response)
- name: id_rfc2971_example_3.2_cyrus
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/id_responses.yml",
                               "test_id_rfc2971_example_3.2_cyrus")
  script: parser.parse(response)
- name: invalid_bodystructure_bug7153_mixed
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/body_structure_responses.yml",
                               "test_invalid_bodystructure_bug7153_mixed")
  script: parser.parse(response)
- name: invalid_bodystructure_message_sent_as_basic
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/body_structure_responses.yml",
                               "test_invalid_bodystructure_message_sent_as_basic")
  script: parser.parse(response)
- name: invalid_capability_extra_space_at_end
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/capability_responses.yml",
                               "test_invalid_capability_extra_space_at_end")
  script: parser.parse(response)
- name: invalid_fetch_msg_att_extra_space
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/fetch_responses.yml",
                               "test_invalid_fetch_msg_att_extra_space")
  script: parser.parse(response)
- name: invalid_fetch_msg_att_rfc822_with_brackets
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/fetch_responses.yml",
                               "test_invalid_fetch_msg_att_rfc822_with_brackets")
  script: parser.parse(response)
- name: invalid_noop_response_is_ignored
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/quirky_behaviors.yml",
                               "test_invalid_noop_response_is_ignored")
  script: parser.parse(response)
- name: invalid_search_response_multiple_result_with_trailing_space
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/search_responses.yml",
                               "test_invalid_search_response_multiple_result_with_trailing_space")
  script: parser.parse(response)
- name: invalid_search_response_single_result_with_trailing_space
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/search_responses.yml",
                               "test_invalid_search_response_single_result_with_trailing_space")
  script: parser.parse(response)
- name: invalid_status_response_trailing_space
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/status_responses.yml",
                               "test_invalid_status_response_trailing_space")
  script: parser.parse(response)
- name: invalid_thread_empty_response
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/thread_responses.yml",
                               "test_invalid_thread_empty_response")
  script: parser.parse(response)
- name: list_with_various_flag_types_and_capitalizations
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/list_responses.yml",
                               "test_list_with_various_flag_types_and_capitalizations")
  script: parser.parse(response)
- name: resp_code_ALREADYEXISTS_rfc9051_7.1_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_ALREADYEXISTS_rfc9051_7.1_example")
  script: parser.parse(response)
- name: resp_code_APPENDUID_rfc9051_6.3.12_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/uidplus_extension.yml",
                               "test_resp_code_APPENDUID_rfc9051_6.3.12_example")
  script: parser.parse(response)
- name: resp_code_APPENDUID_with_MULTIAPPEND_compatibility
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/uidplus_extension.yml",
                               "test_resp_code_APPENDUID_with_MULTIAPPEND_compatibility")
  script: parser.parse(response)
- name: resp_code_AUTHENTICATIONFAILED_rfc9051_7.1_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_AUTHENTICATIONFAILED_rfc9051_7.1_example")
  script: parser.parse(response)
- name: resp_code_AUTHORIZATIONFAILED_rfc9051_7.1_example_1
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_AUTHORIZATIONFAILED_rfc9051_7.1_example_1")
  script: parser.parse(response)
- name: resp_code_AUTHORIZATIONFAILED_rfc9051_7.1_example_2
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_AUTHORIZATIONFAILED_rfc9051_7.1_example_2")
  script: parser.parse(response)
- name: resp_code_BADCHARSET_rfc9051_6.4.4.4_example_modified
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_BADCHARSET_rfc9051_6.4.4.4_example_modified")
  script: parser.parse(response)
- name: resp_code_BADCHARSET_with_astrings
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_BADCHARSET_with_astrings")
  script: parser.parse(response)
- name: resp_code_CANNOT_rfc9051_7.1_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_CANNOT_rfc9051_7.1_example")
  script: parser.parse(response)
- name: resp_code_CAPABILITY_rfc9051_6.2.2_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_CAPABILITY_rfc9051_6.2.2_example")
  script: parser.parse(response)
- name: resp_code_CAPABILITY_with_valid_atoms
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_CAPABILITY_with_valid_atoms")
  script: parser.parse(response)
- name: resp_code_CLIENTBUG_rfc9051_7.1_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_CLIENTBUG_rfc9051_7.1_example")
  script: parser.parse(response)
- name: resp_code_CLOSED
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_CLOSED")
  script: parser.parse(response)
- name: resp_code_CONTACTADMIN_rfc9051_7.1_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_CONTACTADMIN_rfc9051_7.1_example")
  script: parser.parse(response)
- name: resp_code_COPYUID_rfc9051_6.3.12_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/uidplus_extension.yml",
                               "test_resp_code_COPYUID_rfc9051_6.3.12_example")
  script: parser.parse(response)
- name: resp_code_COPYUID_with_reversed_ranges_and_mixed_case
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/uidplus_extension.yml",
                               "test_resp_code_COPYUID_with_reversed_ranges_and_mixed_case")
  script: parser.parse(response)
- name: resp_code_CORRUPTION_rfc9051_7.1_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_CORRUPTION_rfc9051_7.1_example")
  script: parser.parse(response)
- name: resp_code_EXPIRED_rfc9051_7.1_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_EXPIRED_rfc9051_7.1_example")
  script: parser.parse(response)
- name: resp_code_EXPUNGEISSUED_rfc9051_7.1_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_EXPUNGEISSUED_rfc9051_7.1_example")
  script: parser.parse(response)
- name: resp_code_HASCHILDREN_rfc9051_7.1_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_HASCHILDREN_rfc9051_7.1_example")
  script: parser.parse(response)
- name: resp_code_INUSE_rfc9051_7.1_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_INUSE_rfc9051_7.1_example")
  script: parser.parse(response)
- name: resp_code_LIMIT_rfc9051_7.1_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_LIMIT_rfc9051_7.1_example")
  script: parser.parse(response)
- name: resp_code_NONEXISTENT_rfc9051_7.1_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_NONEXISTENT_rfc9051_7.1_example")
  script: parser.parse(response)
- name: resp_code_NOPERM_rfc9051_7.1_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_NOPERM_rfc9051_7.1_example")
  script: parser.parse(response)
- name: resp_code_OVERQUOTA_rfc9051_7.1_example_1
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_OVERQUOTA_rfc9051_7.1_example_1")
  script: parser.parse(response)
- name: resp_code_OVERQUOTA_rfc9051_7.1_example_2
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_OVERQUOTA_rfc9051_7.1_example_2")
  script: parser.parse(response)
- name: resp_code_PERMANENTFLAGS_rfc3501_6.3.1_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_PERMANENTFLAGS_rfc3501_6.3.1_example")
  script: parser.parse(response)
- name: resp_code_PERMANENTFLAGS_rfc3501_6.3.2_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_PERMANENTFLAGS_rfc3501_6.3.2_example")
  script: parser.parse(response)
- name: resp_code_PRIVACYREQUIRED_rfc9051_7.1_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_PRIVACYREQUIRED_rfc9051_7.1_example")
  script: parser.parse(response)
- name: resp_code_READ-ONLY_rfc3501_6.3.2_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_READ-ONLY_rfc3501_6.3.2_example")
  script: parser.parse(response)
- name: resp_code_READ-WRITE_rfc3501_6.3.1_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_READ-WRITE_rfc3501_6.3.1_example")
  script: parser.parse(response)
- name: resp_code_SERVERBUG_rfc9051_7.1_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_SERVERBUG_rfc9051_7.1_example")
  script: parser.parse(response)
- name: resp_code_UIDNEXT_rfc3501_6.3.1_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_UIDNEXT_rfc3501_6.3.1_example")
  script: parser.parse(response)
- name: resp_code_UIDVALIDITY_rfc3501_6.3.1_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_UIDVALIDITY_rfc3501_6.3.1_example")
  script: parser.parse(response)
- name: resp_code_UNAVAILABLE_rfc9051_7.1_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_UNAVAILABLE_rfc9051_7.1_example")
  script: parser.parse(response)
- name: resp_code_UNSEEN_rfc3501_6.3.1_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_code_examples.yml",
                               "test_resp_code_UNSEEN_rfc3501_6.3.1_example")
  script: parser.parse(response)
- name: resp_text_with_T_LBRA
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_text_responses.yml",
                               "test_resp_text_with_T_LBRA")
  script: parser.parse(response)
- name: rfc3501_6.1.1_example_1_capability_response
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/capability_responses.yml",
                               "rfc3501_6.1.1_example_1_capability_response")
  script: parser.parse(response)
- name: rfc3501_6.1.1_example_2_capability_response
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/capability_responses.yml",
                               "rfc3501_6.1.1_example_2_capability_response")
  script: parser.parse(response)
- name: rfc3501_6.2.2_example_continuation_request
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/continuation_requests.yml",
                               "rfc3501_6.2.2_example_continuation_request")
  script: parser.parse(response)
- name: rfc3501_6.3.11_example_continuation_request
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/continuation_requests.yml",
                               "rfc3501_6.3.11_example_continuation_request")
  script: parser.parse(response)
- name: rfc3501_7.1.1_OK_response_example_1
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_cond_examples.yml",
                               "rfc3501_7.1.1_OK_response_example_1")
  script: parser.parse(response)
- name: rfc3501_7.1.1_OK_response_example_2
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_cond_examples.yml",
                               "rfc3501_7.1.1_OK_response_example_2")
  script: parser.parse(response)
- name: rfc3501_7.1.1_OK_response_example_3
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_cond_examples.yml",
                               "rfc3501_7.1.1_OK_response_example_3")
  script: parser.parse(response)
- name: rfc3501_7.1.2_NO_response_example_1
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_cond_examples.yml",
                               "rfc3501_7.1.2_NO_response_example_1")
  script: parser.parse(response)
- name: rfc3501_7.1.2_NO_response_example_4
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_cond_examples.yml",
                               "rfc3501_7.1.2_NO_response_example_4")
  script: parser.parse(response)
- name: rfc3501_7.1.3_BAD_response_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_cond_examples.yml",
                               "rfc3501_7.1.3_BAD_response_example")
  script: parser.parse(response)
- name: rfc3501_7.1.4_PREAUTH_response_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_cond_examples.yml",
                               "rfc3501_7.1.4_PREAUTH_response_example")
  script: parser.parse(response)
- name: rfc3501_7.1.5_BYE_response_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/resp_cond_examples.yml",
                               "rfc3501_7.1.5_BYE_response_example")
  script: parser.parse(response)
- name: rfc3501_7.2.1_CAPABILITY_response_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/capability_responses.yml",
                               "rfc3501_7.2.1_CAPABILITY_response_example")
  script: parser.parse(response)
- name: rfc3501_7.2.2_LIST_response_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/list_responses.yml",
                               "rfc3501_7.2.2_LIST_response_example")
  script: parser.parse(response)
- name: rfc3501_7.2.3_LSUB_response_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/list_responses.yml",
                               "rfc3501_7.2.3_LSUB_response_example")
  script: parser.parse(response)
- name: rfc3501_7.2.4_STATUS_response_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/status_responses.yml",
                               "rfc3501_7.2.4_STATUS_response_example")
  script: parser.parse(response)
- name: rfc3501_7.2.5_SEARCH_response_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/search_responses.yml",
                               "rfc3501_7.2.5_SEARCH_response_example")
  script: parser.parse(response)
- name: rfc3501_7.2.6_FLAGS_response_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/flags_responses.yml",
                               "rfc3501_7.2.6_FLAGS_response_example")
  script: parser.parse(response)
- name: rfc3501_7.3.1_EXISTS_response_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/mailbox_size_responses.yml",
                               "rfc3501_7.3.1_EXISTS_response_example")
  script: parser.parse(response)
- name: rfc3501_7.3.2_RECENT_response_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/mailbox_size_responses.yml",
                               "rfc3501_7.3.2_RECENT_response_example")
  script: parser.parse(response)
- name: rfc3501_7.4.1_EXPUNGE_response_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/expunge_responses.yml",
                               "rfc3501_7.4.1_EXPUNGE_response_example")
  script: parser.parse(response)
- name: rfc3501_7.4.2_FETCH_response_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/fetch_responses.yml",
                               "rfc3501_7.4.2_FETCH_response_example")
  script: parser.parse(response)
- name: rfc3501_7.5_continuation_request_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/continuation_requests.yml",
                               "rfc3501_7.5_continuation_request_example")
  script: parser.parse(response)
- name: rfc3501_8_example_1_UNSEEN_response_code
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/rfc3501_examples.yml",
                               "rfc3501_8_example_1_UNSEEN_response_code")
  script: parser.parse(response)
- name: rfc3501_8_example_2_UIDVALIDITY_response_code
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/rfc3501_examples.yml",
                               "rfc3501_8_example_2_UIDVALIDITY_response_code")
  script: parser.parse(response)
- name: rfc3501_8_example_3_FETCH_ENVELOPE
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/rfc3501_examples.yml",
                               "rfc3501_8_example_3_FETCH_ENVELOPE")
  script: parser.parse(response)
- name: rfc3501_8_example_4_FETCH_BODY[HEADER]
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/rfc3501_examples.yml",
                               "rfc3501_8_example_4_FETCH_BODY[HEADER]")
  script: parser.parse(response)
- name: rfc9051_7.2.1_ENABLED_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/enabled_responses.yml",
                               "rfc9051_7.2.1_ENABLED_example")
  script: parser.parse(response)
- name: rfc9051_7.2.2_capability_example
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/capability_responses.yml",
                               "rfc9051_7.2.2_capability_example")
  script: parser.parse(response)
- name: search_response_empty
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/search_responses.yml",
                               "test_search_response_empty")
  script: parser.parse(response)
- name: search_response_multiple_seq_nums_returned
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/search_responses.yml",
                               "test_search_response_multiple_seq_nums_returned")
  script: parser.parse(response)
- name: search_response_single_seq_nums_returned
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/search_responses.yml",
                               "test_search_response_single_seq_nums_returned")
  script: parser.parse(response)
- name: search_response_with_condstore_modseq
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/search_responses.yml",
                               "test_search_response_with_condstore_modseq")
  script: parser.parse(response)
- name: status_response_uidnext_uidvalidity
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/status_responses.yml",
                               "test_status_response_uidnext_uidvalidity")
  script: parser.parse(response)
- name: thread_rfc5256_example1
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/thread_responses.yml",
                               "thread_rfc5256_example1")
  script: parser.parse(response)
- name: thread_rfc5256_example2
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/thread_responses.yml",
                               "thread_rfc5256_example2")
  script: parser.parse(response)
- name: thread_rfc5256_example3
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/thread_responses.yml",
                               "thread_rfc5256_example3")
  script: parser.parse(response)
- name: thread_rfc5256_example4
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/thread_responses.yml",
                               "thread_rfc5256_example4")
  script: parser.parse(response)
- name: thread_rfc5256_example5
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/thread_responses.yml",
                               "thread_rfc5256_example5")
  script: parser.parse(response)
- name: utf8_in_list_mailbox
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/utf8_responses.yml",
                               "test_utf8_in_list_mailbox")
  script: parser.parse(response)
- name: utf8_in_resp_text
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/utf8_responses.yml",
                               "test_utf8_in_resp_text")
  script: parser.parse(response)
- name: xlist_inbox
  prelude: |2
      response = load_response("../test/net/imap/fixtures/response_parser/list_responses.yml",
                               "test_xlist_inbox")
  script: parser.parse(response)
